strcpy([(char*)]DST.arr, [(char*)]SRC.arr);
DST.len = strlen(DST.arr);
DST.arr[DST.len] = '\0';
=> VARCHAR_v_copy(DST, SRC);


FOO.arr[FOO.len] = '\0';
=> VARCHAR_SETLENZ(FOO);

strcpy(\((char*)\)?FOO.arr,\s*\((char*)\)BAR.arr);
FOO.arr[BAR.len] = '\0';
=> v_copy(FOO, BAR);

strcpy(\((char*)\)FOO.arr,\s*"\([^"]*"\));
=> vp_copy(FOO, "\1")

sprintf(FOO.arr,\s*\(.*\));
=> v_sprintf(FOO, \1);

strcpy((char*)ptr->tail->amount.arr, (char*)amount.arr);

strcpy((char*)ptr->tail->trans_type.arr, trans_type.arr);

strcpy((char*)ptr->jv_type.arr, (char*)jv_type.arr);

strcpy((char*)ptr->tail->amount.arr, (char*)amount.arr);

strcpy((char*)ptr->tail->gl_post_desc.arr, (char*)gl_post_desc.arr);
strcpy((char*)ptr->tail->product.arr, (char*)product.arr);
strcpy((char*)ptr->tail->amount.arr, (char*)amount.arr);

strcpy((char*)ptr->tail->trans_type.arr, trans_type.arr);

ptr->tail->entity.len = strlen((char*) entity.arr);

strcpy((char*)tail->tail->amount.arr, (char*)amount_B_1.arr);
strcpy((char*)tail->tail->product.arr, (char*)product_B_1.arr);

strcpy(temp_product.arr, product_B_1.arr);
